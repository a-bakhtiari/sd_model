{
  "archetypes": [
    {
      "name": "Limits to Growth (Limits to Success)",
      "rationale": "The model shows a growth engine where Project Reputation drives Joining Rate of new contributors, which should increase development capacity. However, this growth creates counteracting forces - more contributors increase PR Review Delay due to limited Core Developer capacity, and more activity creates more Open Issues that require Maintainer time. These balancing loops can limit the growth potential of the project.",
      "additions": {
        "variables": [
          {
            "name": "Growth Pressure",
            "type": "Auxiliary",
            "description": "The pressure from increasing project activity that strains limited resources",
            "rationale": "Needed to represent the increasing demand on limited core developer capacity"
          },
          {
            "name": "Capacity Constraint",
            "type": "Auxiliary",
            "description": "The limiting factor of core developer availability and maintainer time",
            "rationale": "Explicitly represents the system constraint that balances the growth engine"
          }
        ],
        "connections": [
          {
            "from": "New Contributors",
            "to": "Growth Pressure",
            "relationship": "positive",
            "rationale": "More contributors increase pressure on the system"
          },
          {
            "from": "New Pull request",
            "to": "Growth Pressure",
            "relationship": "positive",
            "rationale": "More pull requests increase review workload"
          },
          {
            "from": "Open Issues",
            "to": "Growth Pressure",
            "relationship": "positive",
            "rationale": "More issues increase maintenance workload"
          },
          {
            "from": "Growth Pressure",
            "to": "PR Review Delay",
            "relationship": "positive",
            "rationale": "Increased pressure leads to longer review delays"
          },
          {
            "from": "Growth Pressure",
            "to": "Developer's Turnover",
            "relationship": "positive",
            "rationale": "High pressure can lead to burnout and turnover"
          },
          {
            "from": "Capacity Constraint",
            "to": "Review Rate",
            "relationship": "negative",
            "rationale": "Limited capacity constrains how quickly reviews can be processed"
          }
        ]
      },
      "modifications": {
        "variables": []
      },
      "removals": {
        "variables": []
      }
    },
    {
      "name": "Shifting the Burden (Addiction/Dependence)",
      "rationale": "The model shows potential for shifting from long-term capacity building (knowledge transfer, mentorship) to short-term fixes. When PR Review Delay increases, there may be pressure to quickly merge PRs without proper review or documentation, which undermines knowledge transfer and quality processes. This creates a dependency on quick fixes rather than building sustainable development capacity.",
      "additions": {
        "variables": [
          {
            "name": "Quick Fix Pressure",
            "type": "Auxiliary",
            "description": "Pressure to use quick solutions rather than proper processes",
            "rationale": "Represents the temptation to bypass proper review and documentation"
          },
          {
            "name": "Quality Sacrifice",
            "type": "Auxiliary",
            "description": "Reduction in code quality and process adherence due to pressure",
            "rationale": "Captures the negative consequences of shifting to quick fixes"
          }
        ],
        "connections": [
          {
            "from": "PR Review Delay",
            "to": "Quick Fix Pressure",
            "relationship": "positive",
            "rationale": "Long delays create pressure to bypass proper processes"
          },
          {
            "from": "Open Issues",
            "to": "Quick Fix Pressure",
            "relationship": "positive",
            "rationale": "Many open issues create pressure for quick solutions"
          },
          {
            "from": "Quick Fix Pressure",
            "to": "Merge/Commit",
            "relationship": "positive",
            "rationale": "Pressure leads to faster merging with less review"
          },
          {
            "from": "Quick Fix Pressure",
            "to": "Implicit Knowledge Transfer (Mentorship)",
            "relationship": "negative",
            "rationale": "Quick fixes reduce time available for proper mentorship"
          },
          {
            "from": "Quick Fix Pressure",
            "to": "Explicit Knowledge Transfer (Documentation, Contributor's Guides)",
            "relationship": "negative",
            "rationale": "Pressure reduces documentation efforts"
          },
          {
            "from": "Quality Sacrifice",
            "to": "Software Quality and Features",
            "relationship": "negative",
            "rationale": "Quick fixes reduce overall software quality"
          },
          {
            "from": "Quality Sacrifice",
            "to": "Issue Creation Rate",
            "relationship": "positive",
            "rationale": "Lower quality leads to more issues being created"
          }
        ]
      },
      "modifications": {
        "variables": []
      },
      "removals": {
        "variables": []
      }
    },
    {
      "name": "Success to the Successful (Competitive Exclusion)",
      "rationale": "The model shows reinforcement where Core Developers get more PR Feedback opportunities and mentorship access, while New Contributors struggle with delays and limited guidance. This creates a 'rich get richer' dynamic where experienced contributors become more successful while newcomers face barriers, potentially limiting diversity and long-term sustainability of the contributor base.",
      "additions": {
        "variables": [
          {
            "name": "Resource Allocation Bias",
            "type": "Auxiliary",
            "description": "Unequal distribution of attention and resources toward core vs new contributors",
            "rationale": "Captures the preferential treatment that reinforces existing success"
          },
          {
            "name": "Newcomer Barrier",
            "type": "Auxiliary",
            "description": "Obstacles faced by new contributors in getting attention and support",
            "rationale": "Represents the systemic barriers that maintain the success imbalance"
          }
        ],
        "connections": [
          {
            "from": "Core Developer",
            "to": "Resource Allocation Bias",
            "relationship": "positive",
            "rationale": "More core developers increases bias toward established contributors"
          },
          {
            "from": "Resource Allocation Bias",
            "to": "PR Feedback",
            "relationship": "positive",
            "rationale": "Bias directs more feedback opportunities to core developers"
          },
          {
            "from": "Resource Allocation Bias",
            "to": "Implicit Knowledge Transfer (Mentorship)",
            "relationship": "positive",
            "rationale": "Bias provides more mentorship to already successful contributors"
          },
          {
            "from": "Resource Allocation Bias",
            "to": "Newcomer Barrier",
            "relationship": "positive",
            "rationale": "Resource bias creates higher barriers for newcomers"
          },
          {
            "from": "Newcomer Barrier",
            "to": "Skill up",
            "relationship": "negative",
            "rationale": "Barriers slow down skill development for new contributors"
          },
          {
            "from": "Newcomer Barrier",
            "to": "Developer's Turnover",
            "relationship": "positive",
            "rationale": "High barriers lead to frustration and turnover among new contributors"
          }
        ]
      },
      "modifications": {
        "variables": []
      },
      "removals": {
        "variables": []
      }
    }
  ]
}